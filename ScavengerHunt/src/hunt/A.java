package hunt;

import java.util.*;

public class A {


    private final String input = "37511048612265375838753422854310325851548618404283210255051860706526011781184357102414000067014361273607225081313560326206025804553535852786224748764602642004001627048288441443665372477646228441884533413738221178851754753776405888143021423850156414073633135637147862100234184371875068767518686544564236283514410022542165070677645824778105422501682230147241236084411258530484086236755068644410107364554507058567430762287386177740631248132126333410578873084583852481001017514844203246722255031601467503358725434164225656138804432720864321773320401781342763778353682330210716362211514028707287848617442471821315081560541313370611342415648831243880024303155882353267723685042612266717020542366805448652287153761267430174605617418141742215520455583345466078547218382310616400050164454387634342472353058265887710455316280253374464088112713173787820866652057840745106506606488740548632265862614302655766172034441630045278600725214817265402411205588054754372773060405340011340600082755472043855887758053848435823756157163685173468408710820401310404812232607813047308054673402816554121365285502374733265415585331401715436257724173383468488124500337203467504677304006020028085016037684006571821530622207288782435463267668072707203878627884381384348581168064223262536700085624762214256888282234078054373526427672758684465678574323170136734608050365225374587123541530710365375048585806217405074357065208832000\n" + "\n" + "6989506129717191687533973955401237940057737494829170755123122917877350958972343647283103966616959826811532709967782171830737731960399122819851037726102087691099047408404987589718937249355783474311157676519228271563557773274413350599677409208741714559115092659386301639545699265680332910014878419685962517047706994739203679707918469484650348210120790268396872243378803237977624523782322223992557964181991461817193930699302089454249882517902383589526189625170444093075952661301084299955466237872913199984400889675789548371157099570159493811307718599627508006296064406096599530251745981471424657341242507717479348960748227564770892735044878512233764916327899301389104924991365913038060863561871353901942019127400999937216352726649011096766033819985832967749090295628225982457932794198073213750965157059139823086533650874552893634050942662316519961914382000";

    public static void main(String[] args) {
        new A();
    }

    public static void p3(String s) {
        int[] freqs = new int[26];
        int i;
        for (i = 0; i < s.length(); i++)
            freqs[s.charAt(i) - 97] = freqs[s.charAt(i) - 97] + 1;
        for (i = 0; i < freqs.length; i++) {
            if (freqs[i] % 2 == 0)
                System.out.println(String.valueOf((char)(i + 97)) + ", " + freqs[i]);
        }
    }

    public A() {
        p3(input);
    }

    private int mode(int a[],int n) {
        int maxValue = 0, maxCount = 0, i, j;

        for (i = 0; i < n; ++i) {
            int count = 0;
            for (j = 0; j < n; ++j) {
                if (a[j] == a[i])
                    ++count;
            }

            if (count > maxCount) {
                maxCount = count;
                maxValue = a[i];
            }
        }
        return maxValue;
    }

//    public A() {
////        Map<Integer, Integer> freqMap = new HashMap<>();
////        for(String str : input) {
////            freqMap.put(str.length(), freqMap.getOrDefault(str.length(), 0)+1);
////        }
//
//        int[] temp = new int[input.length];
//        for (int i = 0; i < input.length; i++) {
//            temp[i] = input[i].length();
//        }
//
//        int mode = mode(temp, temp.length);
//        System.out.println(mode);
//
//        List<String> strings = new ArrayList<>();
//        for(String string : input) {
//            if(string.length() != mode) continue;
//            strings.add(string);
//        }
//
//        System.out.println(String.join(",", strings));
//        strings.sort();
//
//    }

//    public A() {
//        for(String string : input) {
//            char[] charArr = string.toCharArray();
//
//            for(int i=1; i<charArr.length-1; i++) {
//                int curValue = charArr[i];
//
//                int valBefore = charArr[i-1];
//                int valAfter = charArr[i+1];
//
//                if(Math.abs(curValue - valBefore) == 1 && Math.abs(valAfter - curValue) == 1) {
//                    System.out.println(String.format("Cur value: %s %s %s | %s", valBefore, curValue, valAfter, charArr[i]));
//                }
//            }
//        }
//    }
}
